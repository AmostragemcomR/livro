format(Sys.time(), "%a %b %d %X %Y")
MunicBR_dat <- readRDS(file="Dados/MunicBR_dat.rds")
MunicBR_dat
ro=MunicBR_dat[CodUF==11]
ro=MunicBR_dat[MunicBR_dat.CodUF==11]
ro=MunicBR_dat[MunicBR_dat$CodUF==11]
ro=MunicBR_dat[MunicBR_dat$CodUF==11,]
ro
MunicBR_dat <- readRDS(file="Dados/MunicBR_dat.rds")[1:52,]
Rondonia <- readRDS(file="Dados/MunicBR_dat.rds")[1:52,]
Rondonia
Rondonia <- readRDS(file="Dados/MunicBR_dat.rds")[1:52,]
Rondonia
#Algoritmo de seleção PPT de Poisson
# Inicializando variáveis
N=6
n=3
fazenda=c(1:N)
area=c(50,1000,125,300,500,25)
area=area[order(area, descending=T)]
sel=A=pii=rep(0,N)
X=sum(area)
# Verificando as unidades com seleção "certa" pelo tamanho
for (i in 1:N){
pii[i]=n*area[i]/X
if (pii[i]>=1){
# Seleção certa: sel=1
sel[i]=1
X=X-area[i]
pii[i]=1
n=n-1
}
}
# Gerando aletório U(0,1) para cada unidade da população
# e incluindo ou não na amostra por seleção aleatória
for (i in 1:N){
if (sel[i] < 1){
A[i]=runif(1,0,1)
pii[i]=n*area[i]/X
# Seleção aleatória: sel=2
if (A[i]<=pii[i]) {sel[i]=2}
}
}
# Juntando as informações numa tabela
tabela=cbind(fazenda,area,A,pii,sel)
# Tabela com os dados e marcação das unidades selecionadas
# (seleção certa: sel=1, seleção aleatória: sel=2)
tabela
#Algoritmo de seleção PPT de Poisson
# Inicializando variáveis
N=6
n=3
fazenda=c(1:N)
area=c(50,1000,125,300,500,25)
area=area[order(area, decreasing=T)]
sel=A=pii=rep(0,N)
X=sum(area)
# Verificando as unidades com seleção "certa" pelo tamanho
for (i in 1:N){
pii[i]=n*area[i]/X
if (pii[i]>=1){
# Seleção certa: sel=1
sel[i]=1
X=X-area[i]
pii[i]=1
n=n-1
}
}
# Gerando aletório U(0,1) para cada unidade da população
# e incluindo ou não na amostra por seleção aleatória
for (i in 1:N){
if (sel[i] < 1){
A[i]=runif(1,0,1)
pii[i]=n*area[i]/X
# Seleção aleatória: sel=2
if (A[i]<=pii[i]) {sel[i]=2}
}
}
# Juntando as informações numa tabela
tabela=cbind(fazenda,area,A,pii,sel)
# Tabela com os dados e marcação das unidades selecionadas
# (seleção certa: sel=1, seleção aleatória: sel=2)
tabela
#Algoritmo de seleção PPT de Poisson
# Inicializando variáveis
N=6
n=3
fazenda=c(1:N)
area=c(50,1000,125,300,500,25)
area=area[order(area, decreasing=T)]
sel=A=pii=rep(0,N)
X=sum(area)
# Verificando as unidades com seleção "certa" pelo tamanho
for (i in 1:N){
pii[i]=n*area[i]/X
if (pii[i]>=1){
# Seleção certa: sel=1
sel[i]=1
X=X-area[i]
pii[i]=1
n=n-1
}
}
# Gerando aletório U(0,1) para cada unidade da população
# e incluindo ou não na amostra por seleção aleatória
for (i in 1:N){
if (sel[i] < 1){
A[i]=runif(1,0,1)
pii[i]=n*area[i]/X
# Seleção aleatória: sel=2
if (A[i]<=pii[i]) {sel[i]=2}
}
}
# Juntando as informações numa tabela
tabela=cbind(fazenda,area,A,pii,sel)
# Tabela com os dados e marcação das unidades selecionadas
# (seleção certa: sel=1, seleção aleatória: sel=2)
tabela
#Algoritmo de seleção PPT de Poisson
# Inicializando variáveis
N=6
n=3
fazenda=c(1:N)
area=c(50,1000,125,300,500,25)
area=area[order(area, decreasing=T)]
sel=A=pii=rep(0,N)
X=sum(area)
# Verificando as unidades com seleção "certa" pelo tamanho
for (i in 1:N){
pii[i]=n*area[i]/X
if (pii[i]>=1){
# Seleção certa: sel=1
sel[i]=1
X=X-area[i]
pii[i]=1
n=n-1
}
}
# Gerando aletório U(0,1) para cada unidade da população
# e incluindo ou não na amostra por seleção aleatória
for (i in 1:N){
if (sel[i] < 1){
A[i]=runif(1,0,1)
pii[i]=n*area[i]/X
# Seleção aleatória: sel=2
if (A[i]<=pii[i]) {sel[i]=2}
}
}
# Juntando as informações numa tabela
tabela=cbind(fazenda,area,A,pii,sel)
# Tabela com os dados e marcação das unidades selecionadas
# (seleção certa: sel=1, seleção aleatória: sel=2)
tabela
tabela=data.frame(cbind(fazenda,area,A,pii,sel))
# Tabela com os dados e marcação das unidades selecionadas
# (seleção certa: sel=1, seleção aleatória: sel=2)
tabela
#Algoritmo de seleção PPT de Poisson
# Inicializando variáveis
N=6
n=3
fazenda=c(1:N)
area=c(50,1000,125,300,500,25)
area=area[order(area, decreasing=T)]
sel=A=pii=rep(0,N)
X=sum(area)
# Verificando as unidades com seleção "certa" pelo tamanho
for (i in 1:N){
pii[i]=n*area[i]/X
if (pii[i]>=1){
# Seleção certa: sel=1
sel[i]=1
X=X-area[i]
pii[i]=1
n=n-1
}
}
# Gerando aletório U(0,1) para cada unidade da população
# e incluindo ou não na amostra por seleção aleatória
for (i in 1:N){
if (sel[i] < 1){
A[i]=runif(1,0,1)
pii[i]=n*area[i]/X
# Seleção aleatória: sel=2
if (A[i]<=pii[i]) {sel[i]=2}
}
}
# Juntando as informações numa tabela
tabela=data.frame(cbind(fazenda,area,A,pii,sel))
# Tabela com os dados e marcação das unidades selecionadas
# (seleção certa: sel=1, seleção aleatória: sel=2)
tabela
# Algoritmo de Hàjek
# Gerando os índices da população e os correspondentes pseudoaleatórios
U=data.frame(1:1000,runif(1000, min = 0, max = 1))
names(U)=c("i","aleat")
# Ordenando segundo os aleatórios gerados (a ordenação pode ser crescente ou decrescente)
s=U[order(U$aleat),]
s=s[1:n,1]
# Algoritmo de Hàjek
N=1000
n=20
# Gerando os índices da população e os correspondentes pseudoaleatórios
U=data.frame(1:N,runif(N, min = 0, max = 1))
names(U)=c("i","aleat")
# Ordenando segundo os aleatórios gerados (a ordenação pode ser crescente ou decrescente)
s=U[order(U$aleat),]
s=s[1:n,1]
#names(s)=c("i")
# A amostra será formada pelas unidades seguintes
s
# Algoritmo de Hàjek
N=1000
n=20
# Gerando os índices da população e os correspondentes pseudoaleatórios
U=data.frame(1:N,runif(N, min = 0, max = 1))
names(U)=c("i","aleat")
# Ordenando segundo os aleatórios gerados (a ordenação pode ser crescente ou decrescente)
s=U[order(U$aleat),]
s=s[1:n,1]
names(s)=c("i")
# A amostra será formada pelas unidades seguintes
s
# Algoritmo de Hàjek
N=1000
n=20
# Gerando os índices da população e os correspondentes pseudoaleatórios
U=data.frame(1:N,runif(N, min = 0, max = 1))
names(U)=c("i","aleat")
# Ordenando segundo os aleatórios gerados (a ordenação pode ser crescente ou decrescente)
s=U[order(U$aleat),]
s=data.frame(s[1:n,1])
#names(s)=c("i")
# A amostra será formada pelas unidades seguintes
s
s
# Algoritmo de Hàjek
N=1000
n=20
# Gerando os índices da população e os correspondentes pseudoaleatórios
U=data.frame(1:N,runif(N, min = 0, max = 1))
names(U)=c("i","aleat")
# Ordenando segundo os aleatórios gerados (a ordenação pode ser crescente ou decrescente)
s=U[order(U$aleat),]
s=data.frame(s[1:n,1])
names(s)=c("i")
# A amostra será formada pelas unidades seguintes
s
s
# Algoritmo de Hàjek
N=1000
n=20
# Gerando os índices da população e os correspondentes pseudoaleatórios
U=data.frame(1:N,runif(N, min = 0, max = 1))
names(U)=c("i","aleat")
# Ordenando segundo os aleatórios gerados (a ordenação pode ser crescente ou decrescente)
s=U[order(U$aleat),]
s=s[1:n,1]
# A amostra será formada pelas unidades seguintes
s
N=1000
n=20
# Gerando os índices da população e os correspondentes pseudoaleatórios
U=data.frame(1:N,runif(N, min = 0, max = 1))
names(U)=c("i","aleat")
# Ordenando segundo os aleatórios gerados (a ordenação pode ser crescente ou decrescente)
s=U[order(U$aleat),]
s=s[1:n,]
# A amostra será formada pelas unidades seguintes
s
s
# Algoritmo de Hàjek
N=1000
n=20
# Gerando os índices da população e os correspondentes pseudoaleatórios
U=data.frame(1:N,runif(N, min = 0, max = 1))
names(U)=c("i","aleat")
# Ordenando segundo os aleatórios gerados (a ordenação pode ser crescente ou decrescente)
s=U[order(U$aleat),]
s=s[1:n,]
rownames(s)=c(1:n)
# A amostra será formada pelas unidades seguintes
s
s
# Algoritmo de Fan, Muller e Rezucha para seleção de uma amostra
# de n unidades de uma população de tamanho N
N = 1000
n = 20
s = NULL # Vetor para guardar os índices das unidades da amostra
i = 0 # Contador das unidades populacionais
j = 0 # Contador das unidades da amostra
while (n > 0 & N > 0) {
i=i+1
# Geração de número pseudo-aleatório uniforme entre 0 e 1 e
# comparação com a fração amostral atualizada. Se for menor
# a unidade entra na amostra.
if (runif(1) < n/N){
j = j+1
s[j]=i
n = n-1 # Atualiza quantas unidades faltam para a amostra
#N = N-1 # Atualiza unidades da população sujeitas à seleção
}
#else;
N = N-1 # Atualiza unidades da população sujeitas à seleção
}
s=data.frame(s)
names(s)=c("i")
# A amostra será formada pelas unidades seguintes
s
s
fazendas_dat.rds
x=fazendas_dat.rds
readRDS(file="Dados/fazendas_dat.rds")
install.packages("devtools")
devtools::install_github('rstudio/bookdown')
bookdown::publish_book(render = 'docs')
